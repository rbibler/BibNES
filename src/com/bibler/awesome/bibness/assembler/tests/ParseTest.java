package com.bibler.awesome.bibness.assembler.tests;

import java.io.File;
import java.util.ArrayList;

import com.bibler.awesome.bibnes.assembler.Assembler;
import com.bibler.awesome.bibnes.assembler.InstructionLine;
import com.bibler.awesome.bibnes.assembler.Label;
import com.bibler.awesome.bibnes.io.TextReader;
import com.bibler.awesome.bibnes.utils.AssemblyUtils;
import com.bibler.awesome.bibnes.utils.StringUtils;

import junit.framework.TestCase;

public class ParseTest extends TestCase {
	
	public void testInstructionParse() {
		Assembler assembler = new Assembler();
		String s = "ADC #$F2";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "AND";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ASL";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BCC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BCS";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BEQ";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BIT";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BMI";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BNE";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BPL";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BRK";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BVC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BVS";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CLC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CLD";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CLI";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CLV";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CMP";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CPX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CPY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "DEC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "DEX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "DEY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "EOR";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "INC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "INX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "INY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "JMP";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "JSR";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "LDA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "LDX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "LDY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "LSR";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ORA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "PHA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "PHP";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "PLA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "PLP";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ROL";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ROR";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "RTI";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "RTS";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "SBC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "SEC";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "SED";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "SEI";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "STA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "STX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "STY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TAX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TAY";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TSX";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TXA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TXS";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TYA";
		assertTrue(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		//Check some fake op codes
		s = "ANR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "BNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "CNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "DNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ENR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "INR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "JNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "LNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "ONR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "PNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "RNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "SNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		s = "TNR";
		assertFalse(assembler.matchOpCode(StringUtils.trimWhiteSpace(s)));
		
	}

	
	
	public void testOpCodeParseAccumulator() {
		Assembler assembler = new Assembler();
		String s = "  ASL A";
		InstructionLine line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x0A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  LSR A";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x4A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  ROL A";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x2A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  ROR A";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x6A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		
	}
	
	public void testOpCodeParseImplied() {
		Assembler assembler = new Assembler();
		String s = "  BRK";
		InstructionLine line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x00, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  CLC";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x18, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  SEC";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x38, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  CLI";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x58, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  SEI";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x78, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  CLV";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xB8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  CLD";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xD8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  SED";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xF8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  NOP";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xEA, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TAX";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xAA, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TXA";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x8A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  DEX";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xCA, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  INX";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xE8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TAY";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xA8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TYA";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x98, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  DEY";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x88, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  INY";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xC8, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  RTI";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x40, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  RTS";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x60, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TXS";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x9A, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  TSX";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0xBA, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  PHA";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x48, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  PLA";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x68, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  PHP";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x08, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		s = "  PLP";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x28, assembler.getOpCode());
		assertEquals(-1, assembler.getAddress());
		
	}
	
	public void testOpCodeParseZeroPage() {
		Assembler assembler = new Assembler();
		String s = "  ASL $45";
		InstructionLine line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x06, assembler.getOpCode());
		assertEquals(0x45, assembler.getAddress());
		s = "  LSR $F2";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x46, assembler.getOpCode());
		assertEquals(0xF2, assembler.getAddress());
		s = "  LSR $F2,X";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x56, assembler.getOpCode());
		assertEquals(0xF2, assembler.getAddress());
		s = "  ROL 32";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x26, assembler.getOpCode());
		assertEquals(32, assembler.getAddress());
		s = "  ROR $ED";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x66, assembler.getOpCode());
		assertEquals(0xED, assembler.getAddress());
	}
	
	public void testOpCodeParseAbsolute() {
		Assembler assembler = new Assembler();
		String s = "  ASL $4400";
		InstructionLine line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x0E, assembler.getOpCode());
		assertEquals(0x4400, assembler.getAddress());
		s = "  LSR $4200";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x4E, assembler.getOpCode());
		assertEquals(0x4200, assembler.getAddress());
		s = "  LSR $4400,X";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x5E, assembler.getOpCode());
		assertEquals(0x4400, assembler.getAddress());
		s = "  ROL 17408";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x2E, assembler.getOpCode());
		assertEquals(0x4400, assembler.getAddress());
		s = "  ROR $4400";
		line = new InstructionLine(s, 0);
		assembler.parseOpCode(line);
		assertEquals(0x6E, assembler.getOpCode());
		assertEquals(0x4400, assembler.getAddress());
		
	}
	
	public void testFromFile() {
		Assembler assembler = new Assembler();
		ArrayList<Integer> machineCode = assembler.passOne(AssemblyUtils.processFile(new File("C:/users/ryan/desktop/test.asm")));
		assembler.writeMachineCodeToFile(new File("C:/users/ryan/desktop/textTest.bin"), machineCode);
	}
	
	

}
